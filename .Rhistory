1*3+2
-20:57
-20:57
1*3+2
-20:57
#nothing happens when i run this line of code
seconds <- ((356*24)*60)*60 #seconds in a year
print(seconds)
#nothing happens when i run this line of code
seconds <- ((365*24)*60)*60 #seconds in a year
print(seconds)
var1 <- log((((5+2)*2)/7)-1)
print(var1)
var1 <- ((((-5+-2)*2)/7)-1)
print(var1)
var1 <- abs((((-5+-2)*2)/7)-1)
print(var1)
str(var1)
fruits <- c("apple", "orange", "grapefruit", "lime")
print(fruits)
print(fruits[3])
print(fruits[4])
print(fruits[4])
tesla_price <- c(131.49, 128.78, 127.17, 133.42, 143.75, 143.89, 144.43, 160.27, 177.9, 166.66, 173.22, 181.41, 188.27, 189.98)
apple_price <- c(135.94, 135.21, 135.27, 137.87, 141.11, 142.53, 141.86, 143.96, 145.93, 143, 144.29, 145.43, 150.82, 154.5)
for (i in length(tesla_price)){
difference[i] <- abs(tesla_price[i] - apple_price)
}
for (i in length(tesla_price)){
difference[i] <- abs(tesla_price[i] - apple_price)
}
for (i in length(tesla_price)){
difference[i] <- abs(tesla_price[i] - apple_price)
}
difference <- abs(tesla_price - apple_price)
print(difference)
print(data[max(difference)])
print(date[max(difference)])
apple_price <- c(135.94, 135.21, 135.27, 137.87, 141.11, 142.53, 141.86, 143.96, 145.93, 143, 144.29, 145.43, 150.82, 154.5)
date <- c("Jan17", "Jan18", "Jan19", "Jan20", "Jan23", "Jan24", "Jan25", "Jan26", "Jan27", "Jan30", "Jan31", "Feb1", "Feb2", "Feb3")
difference <- abs(tesla_price - apple_price)
print(date[max(difference)])
print(max(difference))
difference <- abs(tesla_price - apple_price)
print(max(difference))
print((difference))
print(which.max(difference))
print(date[which.max(difference)])
#ankush banipal, 02/5/24
var1 <- 1+4
var2 <- sqrt(var1)
print(var2)
#ankush banipal, 02/5/24
var1 <- 1+4
var2 <- sqrt(var1)
var3 <- var2-1
str(var3)
print(var1, var2, var3)
print(var1)
print(var2)
print(var3)
var3 > var2
#problem2
charvec <- c("a","b", "c", "d", "e", "f", "g", "l", "m", "a")
print(charvec[1])
print(charvec[8])
#ankush banipal, 02/5/24
#problem 1
var1 <- 1+4
var2 <- sqrt(var1)
var3 <- var2-1
str(var3)
print(var1)
print(var2)
print(var3)
var3 > var2
#problem2
charvec <- c("a","b", "c", "d", "e", "f", "g", "l", "m", "a")
print(charvec[2])
print(charvec[7])
x <- c(1.1, 2.2, 3.3, 1.3, 2.3, 4.2, 5.1, 54.2, 5.2, 5.4)
y <- c(T, F, T, T, T, F, T, T, F, F)
print(length(x))
print(length(y))
z <- x*y
print(x)
print(y)
print(z)
# create a one-way frequency table of the vore column
table(msleep$vore)
library(tidyverse)
data(msleep)
?msleep
table(msleep$conservation)
table(msleep$vore)
table(msleep$conservation)
#PART 2
ggplot(msleep) +
geom_point(aes(brainwt, bodywt))
#(CW) Test out changing one or both of the axes to log scale. Which creates the most informative plot?
ggplot(msleep) +
geom_point(aes(brainwt, bodywt)) +
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#(CW) Test out changing one or both of the axes to log scale. Which creates the most informative plot?
ggplot(msleep) +
geom_point(aes(brainwt, bodywt)) +
scale_y_continuous(trans='log2')
#(CW) Test out changing one or both of the axes to log scale. Which creates the most informative plot?
ggplot(msleep) +
geom_point(aes(brainwt, bodywt)) +
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#(CW) Test out changing one or both of the axes to log scale. Which creates the most informative plot?
ggplot(msleep) +
geom_point(aes(brainwt, bodywt)) +
scale_y_continuous(trans='log2')
#(CW) Create at least one more plot to answer one of your questions about the data.
ggplot(msleep) +
geom_point(aes(brainwt, bodywt)) +
scale_y_continuous(trans='log2') +
sacle_x_continuous(trans='log2')
#(CW) Create at least one more plot to answer one of your questions about the data.
ggplot(msleep) +
geom_point(aes(brainwt, bodywt)) +
scale_y_continuous(trans='log2') +
sacle_x_continuous(trans='log2')
#(CW) Create at least one more plot to answer one of your questions about the data.
ggplot(msleep) +
geom_point(aes(brainwt, bodywt)) +
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#PART 3
# (CW) Create a box plot of vore vs brainwt.
ggplot(msleep) +
geom_boxplot(aes(vore, brainwt))
# (CW) Try log-scaling the brainwt axis.
ggplot(msleep) +
geom_boxplot(aes(vore, brainwt))+
scale_y_continuous(trans='log2')
#(CW) Add points to your plot.
ggplot(msleep) +
geom_boxplot(aes(vore, brainwt))+
geom_point(aes(vore, brainwt)) +
scale_y_continuous(trans='log2')
#(CW) Add jitter to your plot.
ggplot(msleep) +
geom_boxplot(aes(vore, brainwt))+
geom_point(aes(vore, brainwt)) +
geom_jitter(aes(vore, brainwt)) +
scale_y_continuous(trans='log2')
#(CW) Create a boxplot of conservation vs one of the quantitative variables.
ggplot(msleep,aes(conservation, sleep_total))+
geom_boxplot()
#PART 4---------------
#(CW) Create a scatterplot of brainwt vs sleep_total. Consider log-scaling one or both of the axes.
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#(CW) Add a text layer to your plot. Consider using check_overlap=T to make it look neater.
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#(CW) Add a text layer to your plot. Consider using check_overlap=T to make it look neater.
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#PART 4---------------
#(CW) Create a scatterplot of brainwt vs sleep_total. Consider log-scaling one or both of the axes.
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#(CW) Add a text layer to your plot. Consider using check_overlap=T to make it look neater.
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#PART 4---------------
#(CW) Create a scatterplot of brainwt vs sleep_total. Consider log-scaling one or both of the axes.
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#(CW) Add a text layer to your plot. Consider using check_overlap=T to make it look neater.
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2') +
geom_text(check_overlap=T)
geom_point()+
#PART 4---------------
#(CW) Create a scatterplot of brainwt vs sleep_total. Consider log-scaling one or both of the axes.
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#PART 4---------------
#(CW) Create a scatterplot of brainwt vs sleep_total. Consider log-scaling one or both of the axes.
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2')
#(CW) Add a text layer to your plot. Consider using check_overlap=T to make it look neater.
ggplot(msleep, aes(brainwt, sleep_total, label=name)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2') +
geom_text(check_overlap=T)
#(CW) Add a trend line through the data
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2') +
geom_smooth(method="lm")
#(CW) Add a trend line through the data
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point()+
scale_y_continuous(trans='log2') +
scale_x_continuous(trans='log2') +
geom_smooth(method="lm")
#Part 5 ------------
tips <- read_csv("tips.csv")
#Part 5 ------------
tips <- read_csv("tips.csv")
#(CW) Define a new column that is equal to the total amount paid by summing the total_bill and tip columns.
tips$t_amount_paid <- tips$total_bill+tips$tip
# (CW) Write this data frame to a .csv file using the following command
write_csv(tips,"modified_tips.csv")
ggplot(plat3, aes(Map, defWin))+
geom_boxplot()
immo3_map <- read.csv("map_data/maps_competitive_tier=26.csv")
setwd("D:/valostats/valorant-stats-master")
immo3_map <- read.csv("map_data/maps_competitive_tier=26.csv")
plat3 <- read.csv("map_data/maps_competitive_tier=17.csv")
ggplot(immo3_map, aes(atkWin, numMatches))+
geom_point(aes(color=Map))
library(tidyverse)
immo3_map <- read.csv("map_data/maps_competitive_tier=26.csv")
plat3 <- read.csv("map_data/maps_competitive_tier=17.csv")
ggplot(immo3_map, aes(atkWin, numMatches))+
geom_point(aes(color=Map))
str(plat3)
ggplot(plat3, aes(Map, defWin))+
geom_boxplot()
